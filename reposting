import time
import datetime
import logging
import json
import os
import requests
from urllib.parse import quote_plus
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException, WebDriverException

# Logging setup
tlogging = logging.getLogger()
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("linkedin_bot.log"),
        logging.StreamHandler()
    ]
)

class LinkedInBot:
    def __init__(self, email, password, access_token, search_query="agricultural technology"):
        self.email = email
        self.password = password
        self.access_token = access_token
        self.search_query = search_query
        self.driver = None
        self.wait = None
        self.history_file = 'engagement_history.json'
        self.engagement_history = self._load_history()

    def _load_history(self):
        if os.path.exists(self.history_file):
            try:
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logging.error(f"Failed loading history: {e}")
        return {"posts": []}

    def _save_history(self):
        try:
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(self.engagement_history, f, indent=4, ensure_ascii=False)
        except Exception as e:
            logging.error(f"Failed saving history: {e}")

    def setup_browser(self):
        options = webdriver.ChromeOptions()
        options.add_argument("--start-maximized")
        options.add_argument("--disable-notifications")
        self.driver = webdriver.Chrome(options=options)
        self.wait = WebDriverWait(self.driver, 15)

    def login(self):
        logging.info("Logging into LinkedIn via Selenium...")
        self.driver.get("https://www.linkedin.com/login")
        user = self.wait.until(EC.presence_of_element_located((By.ID, "username")))
        pwd = self.wait.until(EC.presence_of_element_located((By.ID, "password")))
        user.send_keys(self.email)
        pwd.send_keys(self.password)
        pwd.send_keys(Keys.RETURN)
        time.sleep(50)  # Wait for login to complete
        try:
            self.wait.until(EC.presence_of_element_located((By.ID, "global-nav")))
            logging.info("Selenium login successful")
            return True
        except TimeoutException:
            logging.error("Selenium login failed")
            return False

    def find_top_post(self):
        encoded = quote_plus(self.search_query)
        url = f"https://www.linkedin.com/search/results/content/?keywords={encoded}"
        logging.info(f"Searching for: {self.search_query}")
        self.driver.get(url)
        time.sleep(5)
        for _ in range(5):
            self.driver.execute_script("window.scrollBy(0, 800)")
            time.sleep(1)
        posts = self.driver.find_elements(By.CSS_SELECTOR, "div.feed-shared-update-v2")
        best, best_score = None, -1
        for p in posts:
            try:
                pid = p.get_attribute('data-urn') or p.get_attribute('id')
                if pid in (x['post_id'] for x in self.engagement_history['posts']):
                    continue
                # reactions
                try:
                    r = p.find_element(By.XPATH, ".//button[contains(@aria-label,'reactions')]/span").text
                    rc = int(''.join(filter(str.isdigit, r)))
                except Exception:
                    rc = 0
                # comments
                try:
                    c = p.find_element(By.XPATH, ".//button[contains(@aria-label,'comment')]/span").text
                    cc = int(''.join(filter(str.isdigit, c)))
                except Exception:
                    cc = 0
                score = rc + cc
                if score > best_score:
                    best, best_score = p, score
            except Exception:
                continue
        return best

    def create_post_api(self, text):
        headers = {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json',
            'X-Restli-Protocol-Version': '2.0.0'
        }       
        body = {
            "author": "uuser_id",
            "lifecycleState": "PUBLISHED",
            "specificContent": {"com.linkedin.ugc.ShareContent": {"shareCommentary": {"text": text},
                "shareMediaCategory": "NONE"}},
            "visibility": {"com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"}
        }
        resp = requests.post('https://api.linkedin.com/v2/ugcPosts', headers=headers, json=body)
        if resp.status_code == 201:
            logging.info("API post created successfully")
            return True
        logging.error(f"API post failed: {resp.status_code} {resp.text}")
        return False

    def repost_once(self):
        post = self.find_top_post()
        if not post:
            logging.info("No post found to repost")
            return
        pid = post.get_attribute('data-urn') or post.get_attribute('id')
        # author
        try:
            actor = post.find_element(By.CSS_SELECTOR,
                "div.update-components-actor__meta span.update-components-actor__title span").text
        except Exception:
            actor = "Unknown"
        # expand text
        try:
            btn = post.find_element(By.CSS_SELECTOR, ".feed-shared-inline-show-more-text__see-more-less-toggle")
            self.driver.execute_script("arguments[0].click();", btn)
            time.sleep(0.5)
        except NoSuchElementException:
            pass
        # text
        try:
            body = post.find_element(By.CSS_SELECTOR,
                "div.feed-shared-update-v2__description span.break-words").text
        except Exception:
            body = ""
        content = f"Repost from {actor}:\n\n{body}"
        content = ''.join(ch for ch in content if ord(ch) <= 0xFFFF)

        # Use API to post
        if self.create_post_api(content):
            now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.engagement_history['posts'].append({'post_id': pid, 'author': actor, 'timestamp': now})
            self._save_history()

    def close(self):
        if self.driver:
            self.driver.quit()

if __name__ == '__main__':
    EMAIL = 'email'
    PASSWORD = 'password'
    TOKEN = 'access_token'  # Replace with your LinkedIn API access token
    bot = LinkedInBot(EMAIL, PASSWORD, TOKEN)
    try:
        bot.setup_browser()
        if bot.login():
            bot.repost_once()
    finally:
        bot.close()
